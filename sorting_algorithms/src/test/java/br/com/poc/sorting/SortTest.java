package br.com.poc.sorting;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class SortTest {

    BubbleSort bubbleSort = new BubbleSort();
    QuickSort quickSort = new QuickSort();
    SelectionSort selectionSort = new SelectionSort();
    InsertionSort insertionSort = new InsertionSort();


    @Test
    void bubleSortArray234(){
        BubbleSort sortAlgorithm = new BubbleSort();
        int[] arrayToSort = {4,3,2};
        int[] expected = {2,3,4};
        assertArrayEquals(expected,sortAlgorithm.sort(arrayToSort));
    }

    @Test
    void bubleSortArray2342(){
        BubbleSort sortAlgorithm = new BubbleSort();
        int[] arrayToSort = {2,3,1,5,4};
        int[] expected = {1,2,3,4,5};
        assertArrayEquals(expected,sortAlgorithm.sort(arrayToSort));
    }

    @Test
    void quickSortArray234(){
        QuickSort sortAlgorithm = new QuickSort();
        int[] arrayToSort = {4,3,2};
        int[] expected = {2,3,4};
        assertArrayEquals(expected,sortAlgorithm.sort(arrayToSort));
    }

    @Test
    void selectionSortArray234(){
        SelectionSort sortAlgorithm = new SelectionSort();
        int[] arrayToSort = {4,3,2};
        int[] expected = {2,3,4};
        assertArrayEquals(expected,sortAlgorithm.sort(arrayToSort));
    }

    @Test
    void insertionSortArray234(){
        InsertionSort sortAlgorithm = new InsertionSort();
        int[] arrayToSort = {4,3,2};
        int[] expected = {2,3,4};
        assertArrayEquals(expected,sortAlgorithm.sort(arrayToSort));
    }

    @Test
    void comparisonTest(){
        int quantity = 10000;
        int[] arrayToSort = new int[quantity];

        for (int i = 0; i < arrayToSort.length; i++) {
            arrayToSort[i] = (int) (Math.random()*quantity);
        }

        bubbleSort.sort(arrayToSort.clone());
        quickSort.sort(arrayToSort.clone());
        selectionSort.sort(arrayToSort.clone());
        insertionSort.sort(arrayToSort.clone());

//        System.out.println(Arrays.toString(arrayToSort));
//        arrayToSort = new int[]{809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276,809, 602, 456, 461, 628, 706, 612, 660, 964, 899, 446, 91, 493, 533, 944, 229, 61, 193, 695, 265, 276, 289, 934, 312, 943, 0, 327, 56, 564, 841, 947, 969, 169, 490, 849, 609, 14, 328, 405, 976, 43, 355, 846, 150, 556, 755, 490, 609, 254, 396, 776, 780, 634, 1, 523, 310, 788, 521, 826, 529, 760, 530, 596, 323, 999, 59, 36, 419, 886, 365, 302, 675, 977, 593, 144, 518, 377, 124, 624, 118, 629, 714, 860, 230, 597, 164, 336, 886, 89, 380, 533, 300, 380, 140, 483, 384, 377, 811, 409, 282, 902, 528, 779, 177, 434, 89, 938, 446, 734, 909, 7, 887, 937, 895, 846, 384, 80, 70, 747, 860, 536, 44, 918, 770, 486, 223, 16, 725, 408, 770, 702, 49, 519, 882, 658, 198, 264, 910, 601, 18, 214, 216, 552, 748, 226, 426, 42, 539, 277, 914, 989, 990, 188, 944, 694, 893, 339, 875, 782, 921, 583, 230, 936, 485, 766, 258, 957, 351, 683, 770, 34, 908, 802, 712, 89, 156, 835, 903, 729, 598, 53, 822, 635, 208, 271, 160, 200, 569, 603, 74, 829, 96, 397, 747, 609, 961, 259, 899, 984, 3, 695, 347, 671, 399, 707, 589, 271, 355, 632, 656, 981, 394, 593, 132, 318, 96, 236, 352, 31, 280, 806, 275, 206, 717, 215, 391, 137, 414, 476, 369, 690, 384, 770, 834, 734, 642, 452, 776, 737, 796, 503, 620, 732, 264, 296, 920, 705, 621, 56, 952, 913, 975, 47, 251, 745, 640, 379, 240, 552, 539, 272, 701, 264, 944, 771, 757, 740, 172, 201, 408, 525, 809, 92, 454, 94, 876, 922, 779, 722, 113, 779, 593, 839, 211, 952, 180, 103, 398, 580, 129, 438, 244, 658, 806, 985, 953, 133, 27, 251, 665, 346, 543, 729, 521, 788, 917, 923, 303, 985, 850, 24, 501, 329, 793, 446, 541, 885, 987, 42, 752, 469, 648, 125, 351, 815, 121, 318, 366, 284, 255, 886, 957, 338, 123, 415, 24, 970, 490, 636, 351, 398, 94, 724, 791, 561, 893, 644, 148, 407, 938, 970, 481, 519, 384, 136, 541, 363, 517, 266, 925, 328, 308, 568, 304, 770, 195, 778, 793, 487, 244, 281, 127, 373, 826, 362, 799, 558, 242, 499, 738, 978, 477, 724, 425, 145, 425, 874, 558, 890, 447, 964, 514, 967, 122, 36, 892, 714, 375, 556, 359, 407, 966, 852, 875, 562, 492, 131, 131, 187, 625, 358, 671, 922, 319, 607, 782, 63, 100, 565, 659, 713, 355, 530, 769, 681, 758, 593, 605, 295, 561, 690, 223, 999, 531, 857, 42, 455, 696, 351, 415, 897, 957, 235, 355, 630, 791, 674, 650, 905, 983, 453, 314, 905, 326, 165, 932, 155, 713, 119, 35, 536, 906, 234, 28, 976, 521, 136, 606, 24, 480, 191, 784, 775, 210, 436, 880, 20, 420, 270, 823, 88, 136, 240, 155, 562, 990, 500, 960, 950, 482, 316, 742, 428, 23, 517, 978, 983, 101, 928, 654, 620, 849, 642, 607, 843, 600, 441, 909, 247, 777, 813, 831, 921, 604, 782, 178, 326, 674, 195, 877, 438, 364, 224, 772, 276, 462, 557, 505, 338, 138, 188, 203, 118, 555, 745, 468, 615, 24, 33, 810, 657, 566, 833, 239, 976, 169, 26, 192, 152, 809, 787, 384, 974, 521, 966, 417, 271, 418, 717, 190, 17, 573, 154, 277, 311, 120, 58, 398, 892, 741, 678, 51, 996, 966, 255, 185, 696, 340, 205, 518, 334, 579, 789, 717, 322, 294, 758, 226, 330, 701, 620, 930, 899, 46, 167, 235, 558, 116, 387, 362, 822, 309, 156, 830, 872, 222, 940, 180, 264, 604, 281, 942, 770, 827, 40, 749, 334, 754, 164, 272, 176, 950, 308, 359, 252, 767, 733, 341, 676, 696, 752, 981, 194, 768, 441, 969, 458, 484, 464, 148, 717, 922, 640, 914, 484, 208, 300, 347, 879, 517, 598, 660, 672, 100, 653, 516, 469, 634, 848, 591, 92, 367, 618, 522, 996, 74, 827, 50, 451, 898, 161, 722, 308, 476, 26, 998, 400, 592, 105, 983, 11, 804, 83, 293, 404, 94, 22, 763, 65, 613, 558, 792, 229, 23, 364, 124, 212, 787, 315, 800, 283, 951, 407, 786, 120, 667, 742, 572, 357, 715, 858, 586, 408, 746, 252, 883, 513, 857, 183, 955, 911, 351, 782, 881, 161, 223, 6, 283, 876, 2, 235, 731, 577, 54, 153, 272, 933, 361, 88, 778, 384, 88, 184, 649, 37, 947, 604, 215, 778, 501, 469, 859, 724, 55, 374, 504, 503, 715, 174, 580, 374, 536, 132, 29, 852, 391, 716, 198, 337, 385, 56, 722, 219, 145, 523, 589, 89, 295, 11, 659, 952, 802, 187, 823, 805, 611, 447, 842, 556, 220, 335, 666, 995, 360, 892, 688, 488, 4, 812, 971, 93, 277, 267, 928, 77, 648, 986, 347, 153, 18, 470, 931, 340, 906, 283, 694, 34, 959, 935, 684, 707, 455, 265, 489, 735, 286, 125, 902, 927, 139, 841, 922, 755, 281, 172, 30, 676, 341, 444, 251, 641, 994, 109, 111, 638, 301, 248, 988, 100, 708, 410, 751, 71, 417, 771, 782, 342, 900, 791, 698, 135, 830, 428, 106, 526, 595, 487, 732, 503, 853, 886, 119, 467, 313, 443, 897, 10, 32, 286, 309, 999, 18, 155, 276, 386, 905, 670, 788, 627, 748, 85, 828, 310, 746, 204, 343, 376, 867, 886, 1, 334, 850, 12, 615, 975, 86, 877, 127, 425, 164, 716, 17, 770, 713, 476, 824, 161, 305, 8, 244, 10, 769, 562, 904, 837, 280, 846, 512, 408, 942, 950, 520, 8, 443, 83, 858, 112, 503, 461, 536, 238, 500, 641, 146, 481, 658, 272, 370, 71, 611, 537, 613, 322, 982, 519, 788, 500, 886, 360, 96, 469, 861, 351, 387, 447, 832, 20, 276, 856, 141, 898, 770, 24, 547, 856, 577, 473, 383, 851, 624, 599, 710, 434, 566, 858, 416, 626, 225, 937, 677, 620, 977, 15, 107, 300, 68, 924, 221, 753, 713};
    }





    @Test
    void ordenadArray(){

        int quantity = 1000;
        int[] arrayToSort = new int[quantity];

        for (int i = 0; i < arrayToSort.length; i++) {
            arrayToSort[i] = i;
        }

        bubbleSort.sort(arrayToSort.clone());
        quickSort.sort(arrayToSort.clone());
        selectionSort.sort(arrayToSort.clone());
        insertionSort.sort(arrayToSort.clone());
    }

    @Test
    void descOrdenedArray(){

        int quantity = 1000;
        int[] arrayToSort = new int[quantity];

        for (int i = 0; i < arrayToSort.length; i++) {
            arrayToSort[i] = i;
        }

        for (int i = 0; i < arrayToSort.length; i++) {
            arrayToSort[i] = arrayToSort.length - i;
        }

        insertionSort.sort(arrayToSort.clone());
        selectionSort.sort(arrayToSort.clone());
        bubbleSort.sort(arrayToSort.clone());
        quickSort.sort(arrayToSort.clone());

    }
}